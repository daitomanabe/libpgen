# はじめに

## このドキュメントを書く参考にしたサイト
Producing Open Source Software (http://producingoss.com)



# 概要

## libpgen(library packet generator)とは
libpgenはC++で簡単にパケットを作成、送受信、解析することができるライブラリです。
開発初期はパケット送信機能のみの実装だったためpacket generatorという名前になってしまいました。
ネットワークプログラミングに精通していなくても、ネットワークの基本的な知識があればこのライブラリをしようして、
様々なネットワークテストを行うことができます。
libpgenはネットワークプログラミング入門から高度な（低レイヤ）ネットワークプログラミングのツール作成までを
補助することを目標としています。
また新たなプロトコルに簡単に対応できるようにしていて、簡単に開発に参加することようにしています。

## 必要な最低限度の知識
C/C++の基本的な文法（別にポインタがどうとかややこしい話は全く出てきません）
ネットワーク関連の基本的な知識。ICMPの基本的な部分を理解していれは、このライブラリを仕様して簡単なpingコマンドを
書くことはすぐにできるでしょう。

## 対応プロトコル
このライブラリは2015年09月10日現在、Ethernet, ARP, IP, ICMP, TCP, UDP, DNS, DHCP, ar_droneに対応しています。
今後も多数のプロトコルや拡張機能を追加していきます。

## 実行可能環境
Linuxで実行可能です。筆者はUbuntuGnome14.04LTSとArchLinuxで実行確認をしました。
現在はLinuxのみをサポートしていますが、今後OSX, BSD系のOSにも対応予定です。
実行マシンでgitがインストールされていればlibpgenのインストール、開発を円滑に進めることができます。

## 開発者について
このライブラリはslank(slank.dev@gmail.com)が開発を行っています。libpgenを気に入ってくれた方や、開発に参加したい、
と感じてくれた方は開発者まで連絡をお願いします。
まだ未熟な大学生ですが、libpgenをより良いものにしていけたら良いと考えています。

## ライセンス
このライブラリのライセンスはGNU GPLとしています。いかなる場合でも、このライブラリを使用しておきた不具合等に
関しての責任は負いかねます。
様々なパケットを生成し、送信することが可能なので、実験は必ず自己環境で行ってください。




# インストール方法
まずはlibpgenをインストールしてみましょう。普通のLinuxであればインストールは簡単にできるはずです。

0. ビルド、インストールに必要なパッケージをインストール
libpgenをビルドするには以下のパッケージが最低でも必要です。使用環境に合わせてインストールしてください。
	g++ version 0.0.0 以降
	make version 0.0.0 以降
	ar version 0.0.0 以降

ubuntuやdebian系なら
	# apt-get install g++ make ar

centOSやFedoraのRHEL系なら
	# yum install g++ make ar



1. ソースコードをダウンロード
http://slankdev.net/libpgen/file.tar.gzからパッケージをダウンローして、任意のディレクトリに展開します。
GitHubにリポジトリを置いているので git cloneをつかえばさらに簡単にソースを入手することができます。


2. makeとインストール
srcディレクトリに移動してmakeを実行してビルドします。makeが完了したらmake installでlibpgenをインストールします。
make installは管理者権限を仕様して実行してください。
	$ cd src
	$ make
	$ sudo make install
これでlibpgenを使って開発を行う準備が整いました。
もしlibpgenを完全にアンインストールしたい場合はsrcディレクトリに移動して以下のコマンドを実行します。
	$ cd src
	$ make uninstall
このコマンドを実行すればlibpgenに関するすべてのファイルを消去して、libpgenをアンインストールすることができます。




# libpgenを使用した簡単なプログラミング
libpgenを使って簡単なプログラムを書いていきましょう。実際にlibpgenを使って開発などを行う前にパケットキャプチャ、ping
コマンドの作成はすることをお勧めします。
現在はパケットキャプチャとpingコマンドのみですが、今後もサンプルの追加をしていく予定です。

[パケットキャプチャ] 
インストールは完了したので、libpgen初めてのプログラミングとして、簡単なパケットキャプチャを作成してみましょう。
このプログラムはとてもシンプルで数行でコーディングできる規模でありながらlibpgenのパケット受信機能のほとんどを
理解することができます。

[pingコマンド]
パケットキャプチャの作成ではlibpgenを使って簡単にパケットの受信、解析を行うことができました。
では最後にネットワーク関連のプログラムの誰もが一度は使うpingコマンドをlibpgenを使って作ってみましょう。
ここではlibpgenのパケット作成、送受信、解析を体験するだけなのでpingコマンドはシンプルに実装します。
ただICMP Echo Requestパケットを送信して、ICMP Echo Replyパケットを受信待機して受信したら表示するだけです。

ここでは特殊的なlibpgenの使い方を説明しました。
次項では一般的なlibpgenの使用方法について説明していきます。




# libpgenでのプログラミングの流れ
libpgenで行うタスクはパケットの作成、編集、送受信、解析です。ここではそれらの方法の基本的作業を説明していきます。

パケットの受信
パケットをpcapファイルから読み取る
パケットの作成,編集,解析
パケットの送信
パケットをpcapファイルに書き込む

## パケット受信
指定したネットワークインターフェースからパケットをバイナリ形式で
受信します。受信したパケットは簡単なインターフェースで編集したり、
送信、pcapに書き込みなどを行えます。
## パケットをpcapファイルから読み込み
wiresharkなどでキャプチャしたpcap形式のファイルを読み込みます。
読み込んだパケットは送信したり、編集して新たにpcap形式のファイルに
書き込むことができます。
## パケット作成,編集,解析
既存のパケットのバイナリを解析し、簡単なインターフェースで
パケットを編集します。
パケットのバイナリを解析して、プロトコルの要素ごとに簡単に解析できます。
対応プロトコルクラスへのリンクを貼ることを忘れずに
## パケット送信
作成したパケットのバイナリを指定したネットワークインターフェースから
送信します。
## パケットをpcapファイルに書き込み
生成したパケットのバイナリをpcapファイルに書き込みます。
書き込んだpcapファイルはwiresharkなどで開いたり、解析をすることが
できます。






# libpgenの機能紹介
libpgenはアドレスクラス、パケットクラス、netutilで構成されています。
以下ではそれらについて説明していきます。

## アドレスクラス
libpgenではIPアドレス、MACアドレスを扱いやすくするためにアドレスを管理するクラスを含んでいます。
以下ではIPアドレスクラス、MACアドレスクラスについて説明していきます。
## パケットクラス
libpgenはサポートするプロトコルごとにパケットクラスが用意されています。
ここでは、各プロトコルのパケットクラスごとに、詳しく説明していきます。
各クラスごとにリンクを貼って、別のページへ飛ぶ（その方がプロトコル追加後にドキュメントが書きやすい）
pgen_unknownクラス
pgen_packetクラス
pgen_ethクラス
pgen_ethクラス
pgen_arpクラス
pgen_ipクラス
pgen_icmpクラス
pgen_tcpクラス
pgen_udpクラス
pgen_dnsクラス
pgen_dhcpクラス
pgen_ardroneクラス
## netutil
libpgenでは、ネットワークインターフェースに関わる作業を完全に独立させています。
以下ではnetutilが持っている機能を紹介します。



# libpgenを拡張する。

## プロトコル拡張の方法
ここではlibpgenを新たなプロトコルに対応させる方法を説明します。
行う作業は以下の0個です。

1. ごちゃごちゃ
2. ごちゃごちゃ
3. ごちゃごちゃ
4. ごちゃごちゃ
5. ごちゃごちゃ



